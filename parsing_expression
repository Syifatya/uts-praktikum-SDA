include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

typedef struct Node {
    char* data;
    struct Node* next;
} Node;

typedef struct {
    Node* top;
} Stack;

void push(Stack* s, char* item) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (!newNode) {
        printf("Alokasi memori gagal!\n");
        return;
    }
    newNode->data = strdup(item);  // Simpan salinan item
    newNode->next = s->top;
    s->top = newNode;
}

char* pop(Stack* s) {
    if (s->top == NULL) {
        printf("Stack kosong! Tidak bisa pop.\n");
        return NULL;
    }
    Node* temp = s->top;
    char* popped = strdup(temp->data);  // Salin data sebelum free
    s->top = temp->next;
    free(temp->data);  // Bebaskan string di dalam node
    free(temp);
    return popped;
}

char* peek(Stack* s) {
    if (s->top == NULL) {
        printf("Stack kosong! Tidak bisa di peek.\n");
        return NULL;
    }
    return s->top->data;
}
int isOperator(char ch);
int precedence(char op);
void infixToPostfix(char* infix, char* postfix);
void postfixToInfix(char* postfix, char* infix);
void infixToPrefix(char* infix, char* prefix);
void prefixToInfix(char* prefix, char* infix);
void postfixToPrefix(char* postfix, char* prefix);
void prefixToPostfix(char* prefix, char* postfix);

int main() {
    char infix[100], postfix[100], prefix[100];
    int choice;
    char lanjut;

     printf("=================================================\n");
    printf("| SELAMAT DATANG DI KALKULATOR NOTASI EKSPRESI! |\n");
    printf("=================================================\n");

    do {
        printf("\n=============================\n");
        printf("|   PILIH MENU KALKULATOR!  |\n");
        printf("============================\n");
        printf("|   1. Infix ke Postfix     |\n");
        printf("|   2. Postfix ke Infix     |\n");
        printf("|   3. Infix ke Prefix      |\n");
        printf("|   4. Prefix ke Infix      |\n");
        printf("|   5. Postfix ke Prefix    |\n");
        printf("|   6. Prefix ke Postfix    |\n");
        printf("|   7. Keluar               |\n");
        printf("============================\n");
        printf("Pilihan Anda: ");
        scanf("%d", &choice);
        getchar(); // Menghapus newline dari buffer setelah scanf

        if (choice == 7) {
            printf("\n====================================\n");
            printf("|    Anda keluar dari kalkulator   |\n");
            printf("====================================\n");
            break;
        }

switch (choice) {
            case 1:

            case 2:
   
            case 3:

            case 4:

            case 5:

            case 6:

            default:
                printf("\n==========================================\n");
                printf("| Pilihan tidak valid, silakan coba lagi |\n");
                printf("==========================================\n");
        } 

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

int precedence(char op) {
    switch (op) {
        case '+': case '-': return 1;
        case '*': case '/': return 2;
        case '^': return 3;
        default: return 0;
    }
}

void infixToPostfix(char* infix, char* postfix) {
    Stack s;
    s.top = NULL;
    int i = 0, k = 0;
    char ch;
    char token[2];

    while ((ch = infix[i++]) != '\0') {
        if (isalnum(ch)) {
            postfix[k++] = ch;
        } else if (ch == '(') {
            token[0] = ch;
            token[1] = '\0';
            push(&s, token);
        } else if (ch == ')') {
            while (s.top != NULL && peek(&s)[0] != '(') {
                postfix[k++] = pop(&s)[0];
            }
            pop(&s);  // Hapus '(' dari stack
        } else if (isOperator(ch)) {
            while (s.top != NULL && precedence(peek(&s)[0]) >= precedence(ch)) {
                postfix[k++] = pop(&s)[0];
            }
            token[0] = ch;
            token[1] = '\0';
            push(&s, token);
        }
    }

    while (s.top != NULL) {
        postfix[k++] = pop(&s)[0];
    }

    postfix[k] = '\0';
}

void postfixToInfix(char* postfix, char* infix) {
    Stack s;
    s.top = NULL;
    int i = 0;
    char ch;
    char operand1[100], operand2[100];

    while ((ch = postfix[i++]) != '\0') {
        if (isalnum(ch)) {
            char token[2] = {ch, '\0'};
            push(&s, token);
        } else if (isOperator(ch)) {
            char* op2 = pop(&s);
            char* op1 = pop(&s);
            if (!op1 || !op2) { 
                printf("Error: Ekspresi postfix tidak valid!\n");
                return;
            }

            // Alokasi memori yang cukup untuk ekspresi baru
            char* expr = (char*)malloc(strlen(op1) + strlen(op2) + 4);
            sprintf(expr, "(%s%c%s)", op1, ch, op2);
            push(&s, expr);
        }
    }

    char* result = pop(&s);
    if (!result) {
        printf("Error: Ekspresi tidak valid.\n");
        return;
    }
    strcpy(infix, result);
    free(result); // Free setelah digunakan
}

void infixToPrefix(char* infix, char* prefix) {
    Stack s;
    s.top = NULL;
    int i, k = 0;
    char ch;
    int len = strlen(infix);
    char* reversedInfix = (char*)malloc(len + 1);
    char* reversedPrefix = (char*)malloc(len + 1);

    // Balik string infix
    for (i = 0; i < len; i++) {
        ch = infix[len - i - 1];
        if (ch == '(') reversedInfix[i] = ')';
        else if (ch == ')') reversedInfix[i] = '(';
        else reversedInfix[i] = ch;
    }
    reversedInfix[len] = '\0';

    // Konversi ke postfix
    infixToPostfix(reversedInfix, reversedPrefix);

    // Balik hasil postfix untuk mendapatkan prefix
    len = strlen(reversedPrefix);
    for (i = 0; i < len; i++) {
        prefix[i] = reversedPrefix[len - i - 1];
    }
    prefix[len] = '\0';

    free(reversedInfix);
    free(reversedPrefix);
}

